version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mygafflist
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Channels
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - SECRET_KEY=django-insecure-development-key
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - DATABASE_URL=postgres://postgres:postgres_dev_password@db:5432/mygafflist
      - USE_POSTGRES=True
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=mygafflist
      - DB_USER=postgres
      - DB_PASSWORD=postgres_dev_password
      - REDIS_URL=redis://redis:6379/0
      - CHANNEL_LAYERS_REDIS_HOST=redis
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: gunicorn --bind 0.0.0.0:8000 --workers 3 --reload my_gaff_list.wsgi:application

  # Daphne for WebSockets
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - SECRET_KEY=django-insecure-development-key
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:postgres_dev_password@db:5432/mygafflist
      - USE_POSTGRES=True
      - DB_HOST=db
      - REDIS_URL=redis://redis:6379/0
      - CHANNEL_LAYERS_REDIS_HOST=redis
    volumes:
      - ./backend:/app
    ports:
      - "8001:8001"
    depends_on:
      - db
      - redis
    command: daphne -b 0.0.0.0 -p 8001 my_gaff_list.asgi:application

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
    ports:
      - "3000:3000"
    depends_on:
      - backend

  # Nginx (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static
      - media_volume:/media
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
      - websocket

volumes:
  postgres_data:
  static_volume:
  media_volume: